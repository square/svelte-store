{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/async-client/index.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,EAAE,GAAG,EAAE,MAAM,cAAc,CAAC;AAEnC;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,QAAW,EACuB,EAAE;IACpC,mDAAmD;IACnD,iDAAiD;IACjD,kEAAkE;IAClE,4DAA4D;IAC5D,MAAM,aAAa,GAAG,GAAG,EAAE;QACzB,UAAU;IACZ,CAAC,CAAC;IACF,OAAO,IAAI,KAAK,CAAC,aAAa,EAAE;QAC9B,GAAG,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,EAAE;YACjC,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;gBAC7B,uDAAuD;gBACvD,0CAA0C;gBAC1C,OAAO,eAAe,CAAC,QAAQ,CAAC,CAAC;aAClC;YACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACtB,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC;aAC3B;YACD,OAAO,CAAO,GAAG,aAAwB,EAAE,EAAE;gBAC3C,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACzC,MAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;gBACtC,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;oBAClC,OAAO,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;iBAC3D;qBAAM;oBACL,OAAO,QAAQ,CAAC;iBACjB;YACH,CAAC,CAAA,CAAC;QACJ,CAAC;QACD,KAAK,EAAE,CAAO,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE;YACpC,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACzC,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;gBACpC,OAAO,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;aAC7D;YACD,OAAO,UAAU,CAAC;QACpB,CAAC,CAAA;QACD,GAAG,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE;YACxC,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAChD,CAAC;QACD,cAAc,CAAC,eAAe,EAAE,QAAQ,EAAE,KAAK;YAC7C,OAAO,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QACD,GAAG,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,EAAE;YACjC,IAAI,QAAQ,IAAI,eAAe,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACb;YAED,IAAI,QAAQ,IAAI,QAAQ,EAAE;gBACxB,OAAO,IAAI,CAAC;aACb;YAED,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,IAAI,KAAK,IAAI,KAAK,YAAY,MAAM,EAAE;gBACpC,wDAAwD;gBACxD,OAAO,QAAQ,IAAK,KAAgB,CAAC;aACtC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KACF,CAAgD,CAAC;AACpD,CAAC,CAAC","sourcesContent":["import { Loadable, StoresValues } from '../async-stores/types.js';\nimport { AsyncClient } from './types.js';\nimport { get } from 'svelte/store';\n\n/**\n * Generates an AsyncClient from a Loadable store. The AsyncClient will have all\n * of the properties of the input store, plus a collection of asynchronous functions\n * for kicking off access of the store's value's properties before it has finished loading.\n * i.e. an asyncClient that loads to {foo: 'bar'} will have a `foo` function that\n * resolves to 'bar' when the store has loaded.\n * @param loadable Loadable to unpack into an asnycClient\n * @returns an asyncClient with the properties of the input store and asynchronous\n * accessors to the properties of the store's loaded value\n */\nexport const asyncClient = <S extends Loadable<unknown>>(\n  loadable: S\n): S & AsyncClient<StoresValues<S>> => {\n  // Generate an empty function that will be proxied.\n  // This lets us invoke the resulting asyncClient.\n  // An anonymous function is used instead of the function prototype\n  // so that testing environments can tell asyncClients apart.\n  const emptyFunction = () => {\n    /* no op*/\n  };\n  return new Proxy(emptyFunction, {\n    get: (proxiedFunction, property) => {\n      if (proxiedFunction[property]) {\n        // this ensures that jest is able to identify the proxy\n        // when setting up spies on its properties\n        return proxiedFunction[property];\n      }\n      if (loadable[property]) {\n        return loadable[property];\n      }\n      return async (...argumentsList: unknown[]) => {\n        const storeValue = await loadable.load();\n        const original = storeValue[property];\n        if (typeof original === 'function') {\n          return Reflect.apply(original, storeValue, argumentsList);\n        } else {\n          return original;\n        }\n      };\n    },\n    apply: async (_, __, argumentsList) => {\n      const storeValue = await loadable.load();\n      if (typeof storeValue === 'function') {\n        return Reflect.apply(storeValue, storeValue, argumentsList);\n      }\n      return storeValue;\n    },\n    set: (proxiedFunction, property, value) => {\n      return Reflect.set(loadable, property, value);\n    },\n    defineProperty(proxiedFunction, property, value) {\n      return Reflect.defineProperty(loadable, property, value);\n    },\n    has: (proxiedFunction, property) => {\n      if (property in proxiedFunction) {\n        return true;\n      }\n\n      if (property in loadable) {\n        return true;\n      }\n\n      const value = get(loadable);\n\n      if (value && value instanceof Object) {\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        return property in (value as object);\n      }\n      return false;\n    },\n  }) as unknown as S & AsyncClient<StoresValues<S>>;\n};\n"]}