{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/async-stores/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Readable, Updater, Writable } from 'svelte/store';\n\nexport type State = 'LOADING' | 'LOADED' | 'RELOADING' | 'ERROR' | 'WRITING';\n\nexport type LoadState = {\n  isLoading: boolean;\n  isReloading: boolean;\n  isLoaded: boolean;\n  isWriting: boolean;\n  isError: boolean;\n  isPending: boolean; // LOADING or RELOADING\n  isSettled: boolean; // LOADED or ERROR\n  error: any | null; // if promise rejected, this will contain the error object\n};\n\nexport type VisitedMap = WeakMap<Readable<unknown>, Promise<unknown>>;\n\nexport interface Loadable<T> extends Readable<T> {\n  load(): Promise<T>;\n  reload?(visitedMap?: VisitedMap): Promise<T>;\n  state?: Readable<LoadState>;\n  reset?(): void;\n  store: Loadable<T>;\n}\n\nexport interface Reloadable<T> extends Loadable<T> {\n  reload(visitedMap?: VisitedMap): Promise<T>;\n}\n\nexport interface AsyncWritable<T> extends Writable<T> {\n  set(value: T, persist?: boolean): Promise<void>;\n  update(updater: Updater<T>): Promise<void>;\n  store: AsyncWritable<T>;\n}\n\nexport type WritableLoadable<T> = Loadable<T> & AsyncWritable<T>;\n\nexport interface AsyncStoreOptions<T> {\n  reloadable?: true;\n  trackState?: true;\n  initial?: T;\n}\nexport declare type StoresArray =\n  | [Readable<unknown>, ...Array<Readable<unknown>>]\n  | Array<Readable<unknown>>;\n/* These types come from Svelte but are not exported, so copying them here */\n/* One or more `Readable`s. */\nexport declare type Stores = Readable<unknown> | StoresArray;\n\nexport declare type ValuesArray<T> = {\n  [K in keyof T]: T[K] extends Readable<infer U> ? U : never;\n};\n\n/** One or more values from `Readable` stores. */\nexport declare type StoresValues<T> = T extends Readable<infer U>\n  ? U\n  : ValuesArray<T>;\n"]}