{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from 'svelte/store';\nimport {\n  StoresArray,\n  VisitedMap,\n  type Loadable,\n  type Reloadable,\n  type Stores,\n  type StoresValues,\n} from '../async-stores/types.js';\n\nexport const getStoresArray = (stores: Stores): StoresArray => {\n  return Array.isArray(stores) ? stores : [stores];\n};\n\nexport const isLoadable = <T>(object: unknown): object is Loadable<T> =>\n  object ? Object.prototype.hasOwnProperty.call(object, 'load') : false;\n\nexport const isReloadable = <T>(object: unknown): object is Reloadable<T> =>\n  object ? Object.prototype.hasOwnProperty.call(object, 'reload') : false;\n\nexport const anyLoadable = (stores: Stores): boolean =>\n  getStoresArray(stores).some(isLoadable);\n\nexport const anyReloadable = (stores: Stores): boolean =>\n  getStoresArray(stores).some(isReloadable);\n\nexport const getAll = <S extends Stores>(stores: S): StoresValues<S> => {\n  const valuesArray = getStoresArray(stores).map((store) =>\n    get(store)\n  ) as unknown as StoresValues<S>;\n  return Array.isArray(stores) ? valuesArray : valuesArray[0];\n};\n\n/**\n * Load a number of Stores. Loading a store will first await loadAll of any parents.\n * @param stores Any Readable or array of Readables to await loading of.\n * @returns Promise that resolves to an array of the loaded values of the input stores.\n * Non Loadables will resolve immediately.\n */\nexport const loadAll = async <S extends Stores>(\n  stores: S\n): Promise<StoresValues<S>> => {\n  const loadPromises = getStoresArray(stores).map((store) => {\n    if (Object.prototype.hasOwnProperty.call(store, 'load')) {\n      return (store as Loadable<unknown>).load();\n    } else {\n      return get(store);\n    }\n  });\n\n  await Promise.all(loadPromises);\n\n  return getAll(stores);\n};\n\n/**\n * Reload a number of stores. Reloading a store will first await reloadAll of any parents.\n * If a store has no ancestors that are flagged as reloadable, reloading is equivalent to loading.\n * @param stores Any Readable or array of Readables to await reloading of.\n * Reloading a store will first await reloadAll of any parents.\n * @returns Promise that resolves to an array of the loaded values of the input stores.\n * Non Loadables will resolve immediately.\n */\nexport const reloadAll = async <S extends Stores>(\n  stores: S,\n  visitedMap?: VisitedMap\n): Promise<StoresValues<S>> => {\n  const visitMap = visitedMap ?? new WeakMap();\n\n  const reloadPromises = getStoresArray(stores).map((store) => {\n    if (Object.prototype.hasOwnProperty.call(store, 'reload')) {\n      // only reload if store has not already been visited\n      if (!visitMap.has(store)) {\n        visitMap.set(store, (store as Loadable<unknown>).reload(visitMap));\n      }\n      return visitMap.get(store);\n    } else if (Object.prototype.hasOwnProperty.call(store, 'load')) {\n      return (store as Loadable<unknown>).load();\n    } else {\n      return get(store);\n    }\n  });\n\n  await Promise.all(reloadPromises);\n\n  return getAll(stores);\n};\n\n/**\n * Load a number of stores, and catch any errors.\n * @param stores Any Readable or array of Readables to await loading of.\n * @returns boolean representing whether the given stores loaded without errors, or not.\n */\nexport const safeLoad = async <S extends Stores>(\n  stores: S\n): Promise<boolean> => {\n  try {\n    await loadAll(stores);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\ntype FlatPromise<T> = T extends Promise<unknown> ? T : Promise<T>;\n\n/**\n * Create a rebounced version of a provided function. The rebounced function resolves to the\n * returned value of the original function, or rejects with an AbortError is the rebounced\n * function is called again before resolution.\n * @param callback The function to be rebounced.\n * @param delay Adds millisecond delay upon rebounced function call before original function\n * is called. Successive calls within this period create rejection without calling original function.\n * @returns Rebounced version of proivded callback function.\n */\nexport const rebounce = <T, U>(\n  callback: (...args: T[]) => U,\n  delay = 0\n): ((...args: T[]) => FlatPromise<U>) & {\n  clear: () => void;\n} => {\n  let previousReject: (reason: Error) => void;\n  let existingTimer: ReturnType<typeof setTimeout>;\n\n  const rebounced = (...args: T[]): FlatPromise<U> => {\n    previousReject?.(\n      new DOMException('The function was rebounced.', 'AbortError')\n    );\n    let currentResolve: (value: U | PromiseLike<U>) => void;\n    let currentReject: (reason: Error) => void;\n\n    const currentPromise = new Promise((resolve, reject) => {\n      currentResolve = resolve;\n      currentReject = reject;\n    }) as U extends Promise<unknown> ? U : Promise<U>;\n\n    const resolveCallback = async () => {\n      try {\n        const result = await Promise.resolve(callback(...args));\n        currentResolve(result);\n      } catch (error) {\n        currentReject(error);\n      }\n    };\n\n    clearTimeout(existingTimer);\n    existingTimer = setTimeout(resolveCallback, delay);\n\n    previousReject = currentReject;\n\n    return currentPromise;\n  };\n\n  const clear = () => {\n    clearTimeout(existingTimer);\n    previousReject?.(\n      new DOMException('The function was rebounced.', 'AbortError')\n    );\n    existingTimer = undefined;\n    previousReject = undefined;\n  };\n\n  rebounced.clear = clear;\n\n  return rebounced;\n};\n"]}